{"version":3,"sources":["Shared/APIService/APIRequest.js","Shared/PageLoader/Spinner.js","Shared/Input/Input.js","Shared/InputValidator/InputValidator.js","WeatherLookup.js/WeatherLookup.js","Shared/LayoverSearch/LayoverSearch.js","WeatherDisplay/WeatherDisplay.js","Shared/ErrorBanner/ErrorBanner.js","Geolocation/geolocation.js","App.js","reportWebVitals.js","index.js"],"names":["getWeatherFromParams","userLocation","a","injectParams","latitude","longitude","param","value","fetch","process","result","json","parseResult","Spinner","props","className","children","Input","setlookupParams","htmlFor","id","type","onChange","event","setTimeout","inputToBeValidated","target","trim","RegExp","test","paramType","parseInt","prevState","isvalid","replace","placeholder","WeatherLookup","setUserLocation","useState","lookupParams","onSubmit","preventDefault","disabled","LayoverSearch","close","onClick","xmlns","viewBox","fill","stroke","strokeMiterlimit","strokeWidth","d","strokeLinecap","strokeLinejoin","WeatherDisplay","name","coord","lat","lon","main","temp","feels_like","weather","displaySearch","setDisplaySearch","imgsrc","icon","Fragment","prev","src","alt","toString","split","description","ErrorBanner","Geolocation","foundWeather","setFoundWeather","isloading","setIsLoading","error","setError","userIsSharingLocation","coords","userIsNotSharingLocation","useEffect","window","navigator","geolocation","getCurrentPosition","getWeather","cod","message","typeOfImg","substring","toLowerCase","style","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96fe8286.chunk.js","sourcesContent":["\n\nconst getWeatherFromParams = async(userLocation)=>{\n    const injectParams = !userLocation.latitude ? `${userLocation.param}=${userLocation.value},us`:`lat=${userLocation.latitude}&lon=${userLocation.longitude}`;\n    const result = await fetch(`https://api.openweathermap.org/data/2.5/weather?${injectParams}&appid=${process.env.REACT_APP_WEATHER_KEY}&units=imperial`);\n    const parseResult = await result.json();\n    return parseResult;\n  \n}\n\nexport {getWeatherFromParams}","import React from 'react'\nimport '../PageLoader/Spinner.css'\nconst Spinner = (props)=>{\n    return(\n        <div className = 'weather-container'>\n        <div className=\"spinner\">{props.children}</div>\n        </div>\n    )\n}\n\nexport default Spinner;","import React from 'react';\nimport { inputValidator } from '../InputValidator/InputValidator';\n\nconst Input = ({setlookupParams})=>{\n    const verifyInput = (event)=>{\n        setTimeout(()=>{\n            let value = event.target.value.trim();\n            if(inputValidator(value)) {\n                const paramType = parseInt(value)? 'zip':'q';\n                setlookupParams(prevState=>({\n                    ...prevState,\n                    isvalid:true,\n                    param:paramType,\n                    value:value.replace(/\\s+/g,'')\n                }));\n                \n            }\n            else {\n                setlookupParams(prevState=>({\n                    ...prevState,\n                    isvalid:false\n                }));          \n            }\n        },500)\n    }\n\n    return(\n        <div>\n        <label htmlFor = \"lookupParams\">Please enter zip or city and state as shown</label>\n        <br></br>\n        <input id=\"lookUpParams\" type = 'text' onChange={verifyInput} placeholder=\"97015 or Clackamas, OR\"></input>\n        </div>\n    )\n}\n\nexport default Input;","export const inputValidator = (inputToBeValidated)=>{\n    const zipRegex = new RegExp(/\\b\\d{5}\\b/g);\n    const cityAndStateRegex = /\\b[a-zA-Z]+,[ ]?[A-Z]{2}\\b/;\n    if(zipRegex.test(inputToBeValidated)){\n        return true;\n    }\n    else if(cityAndStateRegex.test(inputToBeValidated)){\n        return true;\n    }\n    return false; \n}","import React,{useState} from 'react'\nimport Input from '../Shared/Input/Input';\n\nconst WeatherLookup = ({setUserLocation})=>{\n    const [lookupParams, setlookupParams] = useState({param:null,value:'',isvalid:false});\n    \n\n    const verifyInput = event =>{\n        event.preventDefault();\n        const {param,value} = {...lookupParams};\n        const unwrapLocationParams = {param,value};\n        setUserLocation(unwrapLocationParams);\n    }\n    return(\n        <form onSubmit={verifyInput}>\n        <Input setlookupParams={setlookupParams} value ={lookupParams.value}   />\n        <button type=\"submit\" value=\"Submit\" disabled={!lookupParams.isvalid}>Submit</button>\n        </form>\n        \n    )\n}\nexport default WeatherLookup;","import React from 'react';\nimport WeatherLookup from '../../WeatherLookup.js/WeatherLookup';\nimport '../LayoverSearch/LayoverSearch.css'\n\nconst LayoverSearch = ({setUserLocation, close})=> {\n    const closeSearchModal =() =>{\n        close(false)\n    }\n    return (\n        <div className = \"layover-search-container\">\n            <span className='icon-container' onClick={closeSearchModal}><svg xmlns=\"http://www.w3.org/2000/svg\" className=\"ionicon\" viewBox=\"0 0 512 512\"><path fill=\"none\" stroke=\"#af3648\" strokeMiterlimit=\"10\" strokeWidth=\"32\" d=\"M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z\" className=\"colorStrokecurrentColor svgStroke\"/><path fill=\"none\" stroke=\"#af3648\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"32\" d=\"M320 320L192 192M192 320l128-128\" className=\"colorStrokecurrentColor svgStroke\"/></svg></span>\n            <WeatherLookup setUserLocation={setUserLocation}/>\n        </div>\n    )\n}\n\nexport default LayoverSearch;","import React, { useState } from 'react'\nimport LayoverSearch from '../Shared/LayoverSearch/LayoverSearch';\nimport '../WeatherDisplay/WeatherDisplay.css';\n\nconst WeatherDisplay = ({name, coord:{lat,lon},main:{temp, feels_like},weather, setUserLocation})=>{\n    const[displaySearch,setDisplaySearch]= useState(false);\n    const imgsrc = `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`\n\n    const openSearchModal = ()=>{\n        setDisplaySearch((prev)=>!prev)\n    }\n\n    return(\n        <React.Fragment>\n            {displaySearch ? <LayoverSearch close={setDisplaySearch} setUserLocation={setUserLocation} />: <span className='icon-container' onClick={openSearchModal}><svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon-search\" viewBox=\"0 0 512 512\"><path d=\"M456.69 421.39L362.6 327.3a173.81 173.81 0 0034.84-104.58C397.44 126.38 319.06 48 222.72 48S48 126.38 48 222.72s78.38 174.72 174.72 174.72A173.81 173.81 0 00327.3 362.6l94.09 94.09a25 25 0 0035.3-35.3zM97.92 222.72a124.8 124.8 0 11124.8 124.8 124.95 124.95 0 01-124.8-124.8z\" fill=\"#af3648\" className=\"color000 svgShape\"/></svg></span>}\n            <div className = \"weather-stats\">\n                <div><img className =\"weather-icon\" src={imgsrc} alt=\"weather icon\"/></div>\n                <div className=\"temp\">{temp.toString().split('.')[0]}</div>\n                <div className='description'>{weather[0].description}</div>\n                <div className=\"cityName\">{name}</div>\n                <div className=\"coordinates\">{lat}<span>&nbsp;</span>{lon}</div>\n                <div>Feels like:{feels_like.toString().split('.')[0]}</div>\n            </div>\n        </React.Fragment>\n    )\n}\nexport default WeatherDisplay;","import React from 'react';\nimport '../ErrorBanner/ErrorBanner.css'\n\nconst ErrorBanner = (props)=>{\n    return <p className=\"error-banner\">{props.children}</p>\n}\n\nexport default ErrorBanner; ","import React, {useEffect, useState} from 'react';\nimport {getWeatherFromParams} from '../Shared/APIService/APIRequest'\nimport Spinner from '../Shared/PageLoader/Spinner';\nimport WeatherDisplay from '../WeatherDisplay/WeatherDisplay';\nimport ErrorBanner from '../Shared/ErrorBanner/ErrorBanner';\n\nimport '../Geolocation/Geolocation.css'\nimport WeatherLookup from '../WeatherLookup.js/WeatherLookup';\n\nconst Geolocation =  () => {\n  const [userLocation, setUserLocation] = useState('');\n  const [foundWeather, setFoundWeather] = useState('')\n  const [isloading, setIsLoading] = useState(false);\n  const [error,setError] = useState('');\n  const userIsSharingLocation = (result)=>{  \n    setUserLocation(result.coords)\n    setIsLoading(false);\n  }\n\n  const userIsNotSharingLocation = ()=>{\n    setIsLoading(false);\n  }\n\n  useEffect(()=>{\n    if(!!window.navigator.geolocation){\n      setIsLoading(true);\n      window.navigator.geolocation.getCurrentPosition(userIsSharingLocation,userIsNotSharingLocation);\n    }\n   },[]);\n  \n   useEffect(()=>{\n     setError('');\n    const getWeather = async ()=>{\n      if(userLocation){\n        setIsLoading(true);\n        const weather = await getWeatherFromParams(userLocation);\n        if(weather.cod === 200){\n          setFoundWeather(weather);\n        }\n        else {\n          setError(weather.message);\n          setFoundWeather('');\n        }\n        setIsLoading(false);\n      }\n    }  \n    getWeather();\n    },[userLocation]);\n\n    let loadingStatement = 'Currently Loading location'\n    if(isloading){\n      return <Spinner><div>{loadingStatement}</div></Spinner>\n    }\n    let typeOfImg = foundWeather && foundWeather.weather[0].icon;\n\n    if(typeOfImg.substring(0,2) === '50'){\n      typeOfImg = foundWeather.weather[0].main.toLowerCase();\n    }\n    \n    return(\n      <div className = {`weather-container ${foundWeather?'background-image':''}`} style ={{\"backgroundImage\":!!foundWeather ?  `linear-gradient(rgba(0,0,0,.15), rgba(0,0,0,.15)),url(\n        https://weatherappreat.s3.us-west-2.amazonaws.com/weather-app-images/tinified/${typeOfImg}.jpg)`: 'none' }} >\n        {error && <ErrorBanner>{error}</ErrorBanner>}\n        {(!userLocation || error) && <WeatherLookup setUserLocation={setUserLocation}/>}\n        {!!foundWeather && <WeatherDisplay {...foundWeather} setUserLocation={setUserLocation} />}\n      </div>\n      ) \n};\n\n  export default Geolocation;\n\n\n  ","import React from 'react';\nimport './App.css';\nimport Geolocation from './Geolocation/geolocation'\nfunction App() {\n \n\n  return (\n    <div className=\"App\">\n      <Geolocation/> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}